#create optimized daily fantasy baseball lineup using data from SQL generated by complete_newbr
#By Adam Thibault


from BeautifulSoup import *
import sqlite3
import urllib
import re
import time 
start_time = time.time()

home_stadium = {"LAA":"Angel Stadium of Anaheim", "SF":"AT&T Park", "StL":"Busch Stadium", "Ari":"Chase Field", "NYM":"Citi Field", "Phi":"Citizens Bank Park", 
"Det":"Comerica Park", "Col":"Coors Field", "LAD":"Dodger Stadium", "Bos":"Fenway Park", "Tex":"Globe Life Park in Arlington", "Cin":"Great American Ball Park", 
"KC":"Kauffman Stadium", "Mia":"Marlins Park", "Mil":"Miller Park", "Hou":"Minute Maid Park", "Was":"Nationals Park", 
"Oak":"O.co Coliseum", "Bal":"Oriole Park at Camden Yards", "SD":"Petco Park", "Pit":"PNC Park", "Cle":"Progressive Field", "Tor":"Rogers Centre",
"Sea":"Safeco Field", "Min":"Target Field", "TB":"Tropicana Field", "Atl": "Turner Field", "CWS": "U.S. Cellular Field", "ChC":"Wrigley Field", "NYY":"Yankee Stadium"}

lineup_factor = {"1":1.0, "2":0.978, "3":0.954, "4":0.932, "5":0.912, "6":0.893, "7":0.868, "8":0.843, "9":0.815}

#for batters scoring

#take into account opposing starting pitcher data (history bvp, era vs handedness, whip vs handedness)
#call opposing team starting pitcher
#call their stats

#opposing team defense
#how to take weather into account
weather_url = "http://web.archive.org/web/20160604042517/http://dailybaseballdata.com/cgi-bin/weather.pl"

#wind effects
wind_coefficient = {"N":1.4, "NNE":1.25, "NE":1.15, "ENE":1.05, "E": 1, "ESE":0.95, "SE":0.85, "SSE":0.75, "S":0.6, "SSW":-0.75, "SW":-0.85, "WSW":-0.95, "W":-1, "WNW":-1.05, "NW":-1.15, "NNW":-1.25}
wind_mapping = {"N":1, "NNE":2, "NE":3, "ENE":4, "E": 5, "ESE":6, "SE":7, "SSE":8, "S":9, "SSW":10, "SW":11, "WSW":12, "W":13, "WNW":14, "NW":15, "NNW":16}

stadium_wind_shift = {"Angel Stadium":0, "AT&T Park":0, "Busch Stadium":0, "Chase Field":0, "Citi Field":0, "Citizens Bank Park":0, 
"Comerica Park":0, "Coors Field":0, "Dodger Stadium":0, "Fenway Park":0, "Globe Life Park":0, "Great American Ball Park":0, 
"Guaranteed Rate Field":0, "Kauffman Stadium":0, "Marlins Park":0, "Miller Park":0, "Minute Maid Park":0, "Nationals Park":0, 
"Oakland Coliseum":0, "Camden Yards":0, "Petco Park":0, "PNC Park":0, "Progressive Field":0, "Rogers Centre":0,
"SunTrust Park":0, "Safeco Field":0, "Target Field":0, "Tropicana Field":0, "Wrigley Field":0, "Yankee Stadium":0}

#roof effects 

stadium_has_roof = {"Angel Stadium":0, "AT&T Park":0, "Busch Stadium":0, "Chase Field":1, "Citi Field":0, "Citizens Bank Park":0, 
"Comerica Park":0, "Coors Field":0, "Dodger Stadium":0, "Fenway Park":0, "Globe Life Park":0, "Great American Ball Park":0, 
"Guaranteed Rate Field":0, "Kauffman Stadium":0, "Marlins Park":1, "Miller Park":1, "Minute Maid Park":1, "Nationals Park":0, 
"Oakland Coliseum":0, "Camden Yards":0, "Petco Park":0, "PNC Park":0, "Progressive Field":0, "Rogers Centre":1,
"SunTrust Park":0, "Safeco Field":1, "Target Field":0, "Tropicana Field":1, "Wrigley Field":0, "Yankee Stadium":0}

#temperature effects

temp_high = 90
temp_low = 40

#precipitation effects

#precipitation_coefficient = {"0%":1, "20%":, "35%":, "50%":, "65%":,"75%":, "80%": }

#scrape weather_website for daily weather (not complete yet)
def daily_weather(object):
        
    call_weather_url = urllib.urlopen(object)
    weather_website = call_weather_url.read()    
    soup = BeautifulSoup(weather_website)
    table = soup.findAll('table', {'border':'1'})

    
daily_weather(weather_url)

#position in the lineup and who is batting before/after them
#is team coming off a day off?
#shift and framing
#park factors

def ballparkfactorsscraper(object):
    data = []
    call_ballparkfactors_url = urllib.urlopen(object)
    ballparkfactors_website = call_ballparkfactors_url.read()	
    soup = BeautifulSoup(ballparkfactors_website)
    call_ballparkfactors_url.close()
    for player in player_full_names_list:
        ballpark_data[player] = {}
        for h4 in soup.findAll("h4"):    
            counter = 0
            if player_team[player] in home_team:
                if h4.text == home_stadium[player_team[player]]:
                    data = h4.parent.next.next.next.next.next.next.next.table.tbody.findAll("td")
            if opposing_team[player] in home_team:
                if h4.text == home_stadium[opposing_team[player]]:
                    data = h4.parent.next.next.next.next.next.next.next.table.tbody.findAll("td")
            if data:
                for number in data:
                    if handedness[player] == "R":
                        datapoint = counter - 1
                    if handedness[player] == "L":
                        datapoint = counter + 1
                    if handedness[player] == "S":
                        datapoint = [counter+1, counter-1]
                    number = str(number).split(">")[1].split("<")[0]
                    if number == "HR":
                        try:
                            ballpark_data[player]["HR"] = str(data[datapoint]).split(">")[1].split("<")[0]
                        except:
                            ballpark_data[player]["HR"] = (float(str(data[datapoint[0]]).split(">")[1].split("<")[0])+float(str(data[datapoint[1]]).split(">")[1].split("<")[0]))/2.0
                    if number == "Triples":
                        try:
                            ballpark_data[player]["Triples"] = str(data[datapoint]).split(">")[1].split("<")[0]
                        except:
                            ballpark_data[player]["Triples"] = (float(str(data[datapoint[0]]).split(">")[1].split("<")[0])+float(str(data[datapoint[1]]).split(">")[1].split("<")[0]))/2.0
                    if number == "Doubles":
                        try:
                            ballpark_data[player]["Doubles"] = str(data[datapoint]).split(">")[1].split("<")[0]
                        except:
                            ballpark_data[player]["Doubles"] = (float(str(data[datapoint[0]]).split(">")[1].split("<")[0])+float(str(data[datapoint[1]]).split(">")[1].split("<")[0]))/2.0
                    if number == "Singles":
                        try:
                            ballpark_data[player]["Singles"] = str(data[datapoint]).split(">")[1].split("<")[0]
                        except:
                            ballpark_data[player]["Singles"] = (float(str(data[datapoint[0]]).split(">")[1].split("<")[0])+float(str(data[datapoint[1]]).split(">")[1].split("<")[0]))/2.0
                    if number == "R":
                        try:
                            ballpark_data[player]["R"] = str(data[datapoint]).split(">")[1].split("<")[0]
                        except:
                            ballpark_data[player]["R"] = (float(str(data[datapoint[0]]).split(">")[1].split("<")[0])+float(str(data[datapoint[1]]).split(">")[1].split("<")[0]))/2.0
                    counter +=1

#home/road splits - alraedy scraped for in stats
#where they usually hit the ball to
#last 7 days, last 14 days, last 28 days, last 365 days - scraped in stats

#pitchers scoring

#shift and framing
#park factors (see above for batters)
#home/road splits - already scraped for in stats
ballpark_data = {}
ballparkfactor_website = "https://swishanalytics.com/partners/mlb/mlb-park-factors.php"
outfielder_score = {}
third_basemen_score = {}
shortstop_score = {}
second_basemen_score = {}
first_basemen_score = {}
catcher_score = {}
pitcher_score = {}
batter_score = [catcher_score, first_basemen_score, second_basemen_score, third_basemen_score, shortstop_score, outfielder_score]
ballparkfactorsscraper(ballparkfactor_website)
# sql_tables = ["{}last7days".format(year), "{}last14days".format(year), "{}last28days".format(year), "{}last365days".format(year), "{}vsRHStarter".format(year), "{}vsLHStarter".format(year), "{}hmvis".format(year), "{}bvp".format(year)]
score = 0
divisor = 0
most_plate_appearances = {}

#use SQL data generated from complete_newbr to generate a score for each player

def dk_score_from_sql(player_full_name, position, year):
    score = 0
    divisor = 0
    sql_tables = ["{}last7days".format(year), "{}last14days".format(year), "{}last28days".format(year), "{}last365days".format(year), "{}vsRHStarter".format(year), "{}vsLHStarter".format(year), "{}hmvis".format(year), "{}bvp".format(year)]
    for sql_table in sql_tables:
        print sql_table
        if 1 in position:
            conn = sqlite3.connect('%s'%year + 'pitcher.sqlite')
            cur2= conn.cursor()
            try:
                cur2.execute('''SELECT innings_pitched, games_started, K, W, ER, WHIP FROM '%s' WHERE player_name=?'''%sql_table, (player_full_name,))
                stats_from_database = cur2.fetchall()
                innings_pitched = float(stats_from_database[0][0])
                print innings_pitched
                conn.close()
            except:
                conn.close()
                continue

            stat_counter = 1
            # for each_stat in stats_from_database:
                # stats_from_database[0][stat_counter] = float(each_stat)
                # stat_counter += 1
            if sql_table == "{}last7days".format(year):
                if innings_pitched < 4:
                    continue
                else:
                    score += float(2.25*float(stats_from_database[0][0])+2.0*float(stats_from_database[0][2])+4.0*float(stats_from_database[0][3])
                        -2.0*float(stats_from_database[0][4])-0.6*float(stats_from_database[0][0])*float(stats_from_database[0][5]))/innings_pitched*0.10
                    divisor += 0.10
                    print "%s %s"%(player_full_name, sql_table)
            if sql_table == "{}last14days".format(year):
                if innings_pitched < 4:
                    continue
                else:
                    score += float(2.25*float(stats_from_database[0][0])+2.0*float(stats_from_database[0][2])+4.0*float(stats_from_database[0][3])
                        -2.0*float(stats_from_database[0][4])-0.6*float(stats_from_database[0][0])*float(stats_from_database[0][5]))/innings_pitched*0.15
                    divisor += 0.15
                    print "%s %s"%(player_full_name, sql_table)
            if sql_table == "{}last28days".format(year):
                if innings_pitched < 4:
                    continue
                else:
                    score += float(2.25*float(stats_from_database[0][0])+2.0*float(stats_from_database[0][2])+4.0*float(stats_from_database[0][3])
                        -2.0*float(stats_from_database[0][4])-0.6*float(stats_from_database[0][0])*float(stats_from_database[0][5]))/innings_pitched*0.20
                    divisor += 0.20
                    print "%s %s"%(player_full_name, sql_table)
            if sql_table == "{}last365days".format(year):
                if innings_pitched < 35:
                    continue
                else:
                    score += float(2.25*float(stats_from_database[0][0])+2.0*float(stats_from_database[0][2])+4.0*float(stats_from_database[0][3])
                        -2.0*float(stats_from_database[0][4])-0.6*float(stats_from_database[0][0])*float(stats_from_database[0][5]))/innings_pitched*0.25
                    divisor += 0.25
                    print "%s %s"%(player_full_name, sql_table)
            if sql_table == "{}vsRHStarter".format(year):
                if innings_pitched < 4:
                    continue
                else:
                    score += float(2.25*float(stats_from_database[0][0])+2.0*float(stats_from_database[0][2])+4.0*float(stats_from_database[0][3])
                        -2.0*float(stats_from_database[0][4])-0.6*float(stats_from_database[0][0])*float(stats_from_database[0][5]))/innings_pitched*0.10
                    divisor += 0.10
                    print "%s %s"%(player_full_name, sql_table)
            if sql_table == "{}vsLHStarter".format(year):
                if innings_pitched < 4:
                    continue
                else:
                    score += float(2.25*float(stats_from_database[0][0])+2.0*float(stats_from_database[0][2])+4.0*float(stats_from_database[0][3])
                        -2.0*float(stats_from_database[0][4])-0.6*float(stats_from_database[0][0])*float(stats_from_database[0][5]))/innings_pitched*0.10
                    divisor += 0.10
                    print "%s %s"%(player_full_name, sql_table)
            if sql_table == "{}hmvis".format(year):
                if innings_pitched < 4:
                    continue
                else:
                    score += float(2.25*float(stats_from_database[0][0])+2.0*float(stats_from_database[0][2])+4.0*float(stats_from_database[0][3])
                        -2.0*float(stats_from_database[0][4])-0.6*float(stats_from_database[0][0])*float(stats_from_database[0][5]))/innings_pitched*0.10
                    divisor += 0.10
                    print "%s %s"%(player_full_name, sql_table)
            pitcher_score[player_full_name]=pitcher_score.get(player_full_name, 0)
            print "pitcher"
            if divisor is not 0:
                print score
                try:
                    pitcher_score[player_full_name] += float(score)/float(divisor)
                    print "pitcher score added"
                except:
                    pitcher_score[player_full_name] += 0
                    print "pitcher score 0"
            else:
                continue
            
        else:
            if sql_table == "2016bvp" or sql_table == "2017bvp":
                continue
            conn = sqlite3.connect('%s'%year + 'batter.sqlite')
            cur2 = conn.cursor()
            try:
                cur2.execute('''SELECT PA, H, DOUBLE, TRIPLE, HR, RBI, R, BB, HBP, Steals FROM '%s' WHERE player_name=?'''%sql_table, (player_full_name,))
                stats_from_database = cur2.fetchall()
                conn.close()
            except:
                conn.close()
                continue
            if stats_from_database:
                
                plate_appearances = stats_from_database[0][0]
                print plate_appearances
            else:
                continue
            if sql_table == "{}last7days".format(year):
                if plate_appearances < 10:
                    continue
                else:
                    score = float(3.0*float(ballpark_data[player_full_name]["Singles"])*float(stats_from_database[0][1]-stats_from_database[0][2]-stats_from_database[0][3]-stats_from_database[0][4])
                                +5.0*float(ballpark_data[player_full_name]["Doubles"])*float(stats_from_database[0][2])
                                +8.0*float(ballpark_data[player_full_name]["Triples"])*float(stats_from_database[0][3])
                                +10.0*float(ballpark_data[player_full_name]["HR"])*float(stats_from_database[0][4])
                                +2.0*float(stats_from_database[0][5])
                                +2.0*float(ballpark_data[player_full_name]["R"])*float(stats_from_database[0][6])
                                +2.0*float(stats_from_database[0][7]+stats_from_database[0][8])
                                +5.0*float(stats_from_database[0][9]))/float(stats_from_database[0][0])*0.10*float(lineup_factor[player_lineup_spot[player_full_name]])
                    print score
                    divisor += 0.10
                    print "%s %s"%(player_full_name, sql_table)
            if sql_table == "{}last14days".format(year):
                if plate_appearances < 10:
                    continue
                else:
                    score = float(3.0*float(ballpark_data[player_full_name]["Singles"])*float(stats_from_database[0][1]-stats_from_database[0][2]-stats_from_database[0][3]-stats_from_database[0][4])
                                +5.0*float(ballpark_data[player_full_name]["Doubles"])*float(stats_from_database[0][2])
                                +8.0*float(ballpark_data[player_full_name]["Triples"])*float(stats_from_database[0][3])
                                +10.0*float(ballpark_data[player_full_name]["HR"])*float(stats_from_database[0][4])
                                +2.0*float(stats_from_database[0][5])
                                +2.0*float(ballpark_data[player_full_name]["R"])*float(stats_from_database[0][6])
                                +2.0*float(stats_from_database[0][7]+stats_from_database[0][8])
                                +5.0*float(stats_from_database[0][9]))/float(stats_from_database[0][0])*0.15*float(lineup_factor[player_lineup_spot[player_full_name]])
                    divisor += 0.15
                    print "%s %s"%(player_full_name, sql_table)

            if sql_table == "{}last28days".format(year):
                if plate_appearances < 10:
                    continue
                else:
                    score = float(3.0*float(ballpark_data[player_full_name]["Singles"])*float(stats_from_database[0][1]-stats_from_database[0][2]-stats_from_database[0][3]-stats_from_database[0][4])
                                +5.0*float(ballpark_data[player_full_name]["Doubles"])*float(stats_from_database[0][2])
                                +8.0*float(ballpark_data[player_full_name]["Triples"])*float(stats_from_database[0][3])
                                +10.0*float(ballpark_data[player_full_name]["HR"])*float(stats_from_database[0][4])
                                +2.0*float(stats_from_database[0][5])
                                +2.0*float(ballpark_data[player_full_name]["R"])*float(stats_from_database[0][6])
                                +2.0*float(stats_from_database[0][7]+stats_from_database[0][8])
                                +5.0*float(stats_from_database[0][9]))/float(stats_from_database[0][0])*0.20*float(lineup_factor[player_lineup_spot[player_full_name]])
                    divisor += 0.20
                    print "%s %s"%(player_full_name, sql_table)
            if sql_table == "{}last365days".format(year):
                if plate_appearances < 75:
                    continue
                else:
                    score = float(3.0*float(ballpark_data[player_full_name]["Singles"])*float(stats_from_database[0][1]-stats_from_database[0][2]-stats_from_database[0][3]-stats_from_database[0][4])
                                +5.0*float(ballpark_data[player_full_name]["Doubles"])*float(stats_from_database[0][2])
                                +8.0*float(ballpark_data[player_full_name]["Triples"])*float(stats_from_database[0][3])
                                +10.0*float(ballpark_data[player_full_name]["HR"])*float(stats_from_database[0][4])
                                +2.0*float(stats_from_database[0][5])
                                +2.0*float(ballpark_data[player_full_name]["R"])*float(stats_from_database[0][6])
                                +2.0*float(stats_from_database[0][7]+stats_from_database[0][8])
                                +5.0*float(stats_from_database[0][9]))/float(stats_from_database[0][0])*0.25*float(lineup_factor[player_lineup_spot[player_full_name]])
                    divisor += 0.25
                    print "%s %s"%(player_full_name, sql_table)
            if sql_table == "{}vsRHStarter".format(year):
                if plate_appearances < 10:
                    continue
                else:
                    score = float(3.0*float(ballpark_data[player_full_name]["Singles"])*float(stats_from_database[0][1]-stats_from_database[0][2]-stats_from_database[0][3]-stats_from_database[0][4])
                                +5.0*float(ballpark_data[player_full_name]["Doubles"])*float(stats_from_database[0][2])
                                +8.0*float(ballpark_data[player_full_name]["Triples"])*float(stats_from_database[0][3])
                                +10.0*float(ballpark_data[player_full_name]["HR"])*float(stats_from_database[0][4])
                                +2.0*float(stats_from_database[0][5])
                                +2.0*float(ballpark_data[player_full_name]["R"])*float(stats_from_database[0][6])
                                +2.0*float(stats_from_database[0][7]+stats_from_database[0][8])
                                +5.0*float(stats_from_database[0][9]))/float(stats_from_database[0][0])*0.10*float(lineup_factor[player_lineup_spot[player_full_name]])
                    divisor += 0.10
                    print "%s %s"%(player_full_name, sql_table)
            if sql_table == "{}vsLHStarter".format(year):
                if plate_appearances < 10:
                    continue
                else:
                    score = float(3.0*float(ballpark_data[player_full_name]["Singles"])*float(stats_from_database[0][1]-stats_from_database[0][2]-stats_from_database[0][3]-stats_from_database[0][4])
                                +5.0*float(ballpark_data[player_full_name]["Doubles"])*float(stats_from_database[0][2])
                                +8.0*float(ballpark_data[player_full_name]["Triples"])*float(stats_from_database[0][3])
                                +10.0*float(ballpark_data[player_full_name]["HR"])*float(stats_from_database[0][4])
                                +2.0*float(stats_from_database[0][5])
                                +2.0*float(ballpark_data[player_full_name]["R"])*float(stats_from_database[0][6])
                                +2.0*float(stats_from_database[0][7]+stats_from_database[0][8])
                                +5.0*float(stats_from_database[0][9]))/float(stats_from_database[0][0])*0.10*float(lineup_factor[player_lineup_spot[player_full_name]])
                    divisor += 0.10
                    print "%s %s"%(player_full_name, sql_table)
            if sql_table == "{}hmvis".format(year):
                if plate_appearances < 10:
                    continue
                else:
                    score = float(3.0*float(ballpark_data[player_full_name]["Singles"])*float(stats_from_database[0][1]-stats_from_database[0][2]-stats_from_database[0][3]-stats_from_database[0][4])
                                +5.0*float(ballpark_data[player_full_name]["Doubles"])*float(stats_from_database[0][2])
                                +8.0*float(ballpark_data[player_full_name]["Triples"])*float(stats_from_database[0][3])
                                +10.0*float(ballpark_data[player_full_name]["HR"])*float(stats_from_database[0][4])
                                +2.0*float(stats_from_database[0][5])
                                +2.0*float(ballpark_data[player_full_name]["R"])*float(stats_from_database[0][6])
                                +2.0*float(stats_from_database[0][7]+stats_from_database[0][8])
                                +5.0*float(stats_from_database[0][9]))/float(stats_from_database[0][0])*0.10*float(lineup_factor[player_lineup_spot[player_full_name]])
                    divisor += 0.10
                    print "%s %s"%(player_full_name, sql_table)
            if sql_table == "{}bvp".format(year):
                if plate_appearances < 10:
                    continue
                else:
                    score += float(3.0*float(ballpark_data[player_full_name]["Singles"])*float(stats_from_database[0][1]-stats_from_database[0][2]-stats_from_database[0][3]-stats_from_database[0][4])
                            +5.0*float(ballpark_data[player_full_name]["Doubles"])*float(stats_from_database[0][2])
                            +8.0*float(ballpark_data[player_full_name]["Triples"])*float(stats_from_database[0][3])
                            +10.0*float(ballpark_data[player_full_name]["HR"])*float(stats_from_database[0][4])
                            +2.0*float(stats_from_database[0][5])
                            +2.0*float(stats_from_database[0][7]+stats_from_database[0][8]))/float(stats_from_database[0][0])*0.10*float(lineup_factor[player_lineup_spot[player_full_name]])
                    divisor += 0.10
                    print "%s %s"%(player_full_name, sql_table)
            if divisor is not 0:    
                print score
                if 2 in position:
                    catcher_score[player_full_name]=catcher_score.get(player_full_name, 0)
                    print "catcher"
                    catcher_score[player_full_name] += float(score)/float(divisor)
                    print "catcher score added"
                if 3 in position:
                    first_basemen_score[player_full_name]=first_basemen_score.get(player_full_name, 0)
                    print "first baseman"
                    first_basemen_score[player_full_name] += float(score)/float(divisor)
                    print "first baseman added"
                if 4 in position:
                    second_basemen_score[player_full_name]=second_basemen_score.get(player_full_name, 0)
                    print "second baseman"
                    second_basemen_score[player_full_name] += float(score)/float(divisor)
                    print "second baseman added"
                if 5 in position:
                    third_basemen_score[player_full_name]=third_basemen_score.get(player_full_name, 0)
                    print "third baseman"
                    third_basemen_score[player_full_name] += float(score)/float(divisor)
                    print "third baseman added"
                if 6 in position:
                    shortstop_score[player_full_name]=shortstop_score.get(player_full_name, 0)
                    print "shortstop"
                    shortstop_score[player_full_name] += float(score)/float(divisor)
                    print "shortstop added"
                if 7 in position:
                    outfielder_score[player_full_name]=outfielder_score.get(player_full_name, 0)
                    print "outfielder"
                    outfielder_score[player_full_name] += float(score)/float(divisor)
                    print "outfielder added"
                    
outfielder_fd_score = {}
third_basemen_fd_score = {}
shortstop_fd_score = {}
second_basemen_fd_score = {}
first_basemen_fd_score = {}
catcher_fd_score = {}
pitcher_fd_score = {}
batter_fd_score = [catcher_fd_score, first_basemen_fd_score, second_basemen_fd_score, third_basemen_fd_score, shortstop_fd_score, outfielder_fd_score]

def fd_score_from_sql(player_full_name, position):
    score = 0
    divisor = 0
    for sql_table in sql_tables:
        if 1 in position:
            conn = sqlite3.connect('%s'%year + 'pitcher.sqlite')
            cur2= conn.cursor()
            try:
                cur2.execute('''SELECT innings_pitched, games_started, K, W, ER, WHIP FROM '%s' WHERE player_name=?'''%sql_table, (player_full_name,))
                stats_from_database = cur2.fetchall()
                innings_pitched = stats_from_database[0][0]
                conn.close()
            except:
                conn.close()
                continue

            stat_counter = 1
            # for each_stat in stats_from_database:
                # stats_from_database[0][stat_counter] = float(each_stat)
                # stat_counter += 1
            if sql_table == "{}last7days".format(year):
                if innings_pitched < 4:
                    continue
                else:
                    try:
                        score += float(3.0*stats_from_database[0][0]
                        +3.0*stats_from_database[0][2]
                        +6.0*stats_from_database[0][3]
                        -3.0*stats_from_database[0][4])/stats_from_database[0][1]*0.10
                        divisor += 0.10
                        print "%s %s"%(player_full_name, sql_table)
                    except:
                        pass
            if sql_table == "{}last14days".format(year):
                if innings_pitched < 4:
                    continue
                else:
                    try:
                        score += float(3.0*stats_from_database[0][0]
                        +3.0*stats_from_database[0][2]
                        +6.0*stats_from_database[0][3]
                        -3.0*stats_from_database[0][4])/stats_from_database[0][1]*0.15
                        divisor += 0.15
                    except:
                        pass
            if sql_table == "{}last28days".format(year):
                if innings_pitched < 4:
                    continue
                else:
                    try:
                        score += float(3.0*stats_from_database[0][0]
                        +3.0*stats_from_database[0][2]
                        +6.0*stats_from_database[0][3]
                        -3.0*stats_from_database[0][4])/stats_from_database[0][1]*0.20
                        divisor += 0.20
                    except:
                        pass
            if sql_table == "{}last365days".format(year):
                if innings_pitched < 35:
                    continue
                else:
                    try:
                        score += float(3.0*stats_from_database[0][0]
                        +3.0*stats_from_database[0][2]
                        +6.0*stats_from_database[0][3]
                        -3.0*stats_from_database[0][4])/stats_from_database[0][1]*0.25
                        divisor += 0.25
                    except:
                        pass
            if sql_table == "{}vsRHStarter".format(year):
                if innings_pitched < 4:
                    continue
                else:
                    try:
                        score += float(3.0*stats_from_database[0][0]
                        +3.0*stats_from_database[0][2]
                        +6.0*stats_from_database[0][3]
                        -3.0*stats_from_database[0][4])/stats_from_database[0][1]*0.10
                        divisor += 0.1
                    except:
                        pass
            if sql_table == "{}vsLHStarter".format(year):
                if innings_pitched < 4:
                    continue
                else:
                    try:
                        score += float(3.0*stats_from_database[0][0]
                        +3.0*stats_from_database[0][2]
                        +6.0*stats_from_database[0][3]
                        -3.0*stats_from_database[0][4])/stats_from_database[0][1]*0.10
                        divisor += 0.1
                    except:
                        pass
            if sql_table == "{}hmvis".format(year):
                if innings_pitched < 4:
                    continue
                else:
                    try:
                        score += float(3.0*stats_from_database[0][0]
                        +3.0*stats_from_database[0][2]
                        +6.0*stats_from_database[0][3]
                        -3.0*stats_from_database[0][4])/stats_from_database[0][1]*0.10
                        divisor += 0.1
                    except:
                        pass
                pitcher_fd_score[player_full_name]=pitcher_score.get(player_full_name, 0)
                try:
                    pitcher_fd_score[player_full_name] += float(score)/float(divisor)
                except:
                    pitcher_fd_score[player_full_name] += 0
            
        else:
            conn = sqlite3.connect('%s'%year + 'batter.sqlite')
            cur2 = conn.cursor()
            cur2.execute('''SELECT PA, H, DOUBLE, TRIPLE, HR, RBI, R, BB, HBP, Steals FROM '%s' WHERE player_name=?'''%sql_table, (player_full_name,))
            stats_from_database = cur2.fetchall()
            conn.close()
            try:
                plate_appearances = stats_from_database[0][0]
            except:
                continue
            stat_counter = 1
            # if len(stats_from_database) is not 0:
                # for each_stat in stats_from_database[0]:
                    # print each_stat
                    
                    # stats_from_database[0][stat_counter] = float(each_stat)
                    # stat_counter += 1

            if sql_table == "{}last7days".format(year):
                if plate_appearances < 10:
                    continue
                else:
                    try:
                        score += float(3.0*ballpark_data[player_full_name]["Singles"]*float(stats_from_database[0][1]-stats_from_database[0][2]-stats_from_database[0][3]-stats_from_database[0][4])
                                +6.0*ballpark_data[player_full_name]["Doubles"]*stats_from_database[0][2]
                                +9.0*ballpark_data[player_full_name]["Triples"]*stats_from_database[0][3]
                                +12.0*ballpark_data[player_full_name]["HR"]*stats_from_database[0][4]
                                +3.5*stats_from_database[0][5]
                                +3.2*ballpark_data[player_full_name]["R"]*stats_from_database[0][6]
                                +3.0*float(stats_from_database[0][7]+stats_from_database[0][8])
                                +6.0*stats_from_database[0][9])/stats_from_database[0][0]*0.10*lineup_factor[player_lineup_spot[player_full_name]]
                        divisor += 0.10
                    except:
                        pass
            if sql_table == "{}last14days".format(year):
                if plate_appearances < 10:
                    continue
                else:
                    try:
                        score += float(3.0*ballpark_data[player_full_name]["Singles"]*float(stats_from_database[0][1]-stats_from_database[0][2]-stats_from_database[0][3]-stats_from_database[0][4])
                                +6.0*ballpark_data[player_full_name]["Doubles"]*stats_from_database[0][2]
                                +9.0*ballpark_data[player_full_name]["Triples"]*stats_from_database[0][3]
                                +12.0*ballpark_data[player_full_name]["HR"]*stats_from_database[0][4]
                                +3.5*stats_from_database[0][5]
                                +3.2*ballpark_data[player_full_name]["R"]*stats_from_database[0][6]
                                +3.0*float(stats_from_database[0][7]+stats_from_database[0][8])
                                +6.0*stats_from_database[0][9])/stats_from_database[0][0]*0.10*lineup_factor[player_lineup_spot[player_full_name]]
                        divisor += 0.15
                    except:
                        pass
            if sql_table == "{}last28days".format(year):
                if plate_appearances < 10:
                    continue
                else:
                    try:
                        score +=float(3.0*ballpark_data[player_full_name]["Singles"]*float(stats_from_database[0][1]-stats_from_database[0][2]-stats_from_database[0][3]-stats_from_database[0][4])
                                +6.0*ballpark_data[player_full_name]["Doubles"]*stats_from_database[0][2]
                                +9.0*ballpark_data[player_full_name]["Triples"]*stats_from_database[0][3]
                                +12.0*ballpark_data[player_full_name]["HR"]*stats_from_database[0][4]
                                +3.5*stats_from_database[0][5]
                                +3.2*ballpark_data[player_full_name]["R"]*stats_from_database[0][6]
                                +3.0*float(stats_from_database[0][7]+stats_from_database[0][8])
                                +6.0*stats_from_database[0][9])/stats_from_database[0][0]*0.20*lineup_factor[player_lineup_spot[player_full_name]]
                        divisor += 0.20
                    except:
                        pass        
            if sql_table == "{}last365days".format(year):
                if stats_from_database[0][0] < 75:
                    continue
                else:
                    try:
                        score += float(3.0*ballpark_data[player_full_name]["Singles"]*float(stats_from_database[0][1]-stats_from_database[0][2]-stats_from_database[0][3]-stats_from_database[0][4])
                                +6.0*ballpark_data[player_full_name]["Doubles"]*stats_from_database[0][2]
                                +9.0*ballpark_data[player_full_name]["Triples"]*stats_from_database[0][3]
                                +12.0*ballpark_data[player_full_name]["HR"]*stats_from_database[0][4]
                                +3.5*stats_from_database[0][5]
                                +3.2*ballpark_data[player_full_name]["R"]*stats_from_database[0][6]
                                +3.0*float(stats_from_database[0][7]+stats_from_database[0][8])
                                +6.0*stats_from_database[0][9])/stats_from_database[0][0]*0.10*lineup_factor[player_lineup_spot[player_full_name]]
                        divisor += 0.25
                    except:
                        pass
            if sql_table == "{}vsRHStarter".format(year):
                if plate_appearances < 10:
                    continue
                else:
                    try:
                        score += float(3.0*ballpark_data[player_full_name]["Singles"]*float(stats_from_database[0][1]-stats_from_database[0][2]-stats_from_database[0][3]-stats_from_database[0][4])
                                +6.0*ballpark_data[player_full_name]["Doubles"]*stats_from_database[0][2]
                                +9.0*ballpark_data[player_full_name]["Triples"]*stats_from_database[0][3]
                                +12.0*ballpark_data[player_full_name]["HR"]*stats_from_database[0][4]
                                +3.5*stats_from_database[0][5]
                                +3.2*ballpark_data[player_full_name]["R"]*stats_from_database[0][6]
                                +3.0*float(stats_from_database[0][7]+stats_from_database[0][8])
                                +6.0*stats_from_database[0][9])/stats_from_database[0][0]*0.10*lineup_factor[player_lineup_spot[player_full_name]]
                        divisor += 0.10
                    except:
                        pass
            if sql_table == "{}vsLHStarter".format(year):
                if plate_appearances < 10:
                    continue
                else:
                    try:
                        score += float(3.0*ballpark_data[player_full_name]["Singles"]*float(stats_from_database[0][1]-stats_from_database[0][2]-stats_from_database[0][3]-stats_from_database[0][4])
                                +6.0*ballpark_data[player_full_name]["Doubles"]*stats_from_database[0][2]
                                +9.0*ballpark_data[player_full_name]["Triples"]*stats_from_database[0][3]
                                +12.0*ballpark_data[player_full_name]["HR"]*stats_from_database[0][4]
                                +3.5*stats_from_database[0][5]
                                +3.2*ballpark_data[player_full_name]["R"]*stats_from_database[0][6]
                                +3.0*float(stats_from_database[0][7]+stats_from_database[0][8])
                                +6.0*stats_from_database[0][9])/stats_from_database[0][0]*0.10*lineup_factor[player_lineup_spot[player_full_name]]
                        divisor += 0.10
                    except:
                        pass
            if sql_table == "{}hmvis".format(year):
                if plate_appearances < 10:
                    continue
                else:
                    try:
                        score += float(3.0*ballpark_data[player_full_name]["Singles"]*float(stats_from_database[0][1]-stats_from_database[0][2]-stats_from_database[0][3]-stats_from_database[0][4])
                                +6.0*ballpark_data[player_full_name]["Doubles"]*stats_from_database[0][2]
                                +9.0*ballpark_data[player_full_name]["Triples"]*stats_from_database[0][3]
                                +12.0*ballpark_data[player_full_name]["HR"]*stats_from_database[0][4]
                                +3.5*stats_from_database[0][5]
                                +3.2*ballpark_data[player_full_name]["R"]*stats_from_database[0][6]
                                +3.0*float(stats_from_database[0][7]+stats_from_database[0][8])
                                +6.0*stats_from_database[0][9])/stats_from_database[0][0]*0.10*lineup_factor[player_lineup_spot[player_full_name]]
                        divisor += 0.10
                    except:
                        pass
            if sql_table == "{}bvp".format(year):
                if plate_appearances < 10:
                    continue
                else:
                    try:
                        score += float(3.0*ballpark_data[player_full_name]["Singles"]*float(stats_from_database[0][1]-stats_from_database[0][2]-stats_from_database[0][3]-stats_from_database[0][4])
                                +6.0*ballpark_data[player_full_name]["Doubles"]*stats_from_database[0][2]
                                +9.0*ballpark_data[player_full_name]["Triples"]*stats_from_database[0][3]
                                +12.0*ballpark_data[player_full_name]["HR"]*stats_from_database[0][4]
                                +3.5*stats_from_database[0][5]
                                +3.0*float(stats_from_database[0][7]+stats_from_database[0][8]))/stats_from_database[0][0]*0.10*lineup_factor[player_lineup_spot[player_full_name]]
                        divisor += 0.10
                    except:
                        pass
                if 2 in position:
                    catcher_fd_score[player_full_name]=catcher_fd_score.get(player_full_name, 0)
                    try:
                        catcher_fd_score[player_full_name] += float(score)/float(divisor)
                    except:
                        catcher_fd_score[player_full_name] += 0
                if 3 in position:
                    first_basemen_fd_score[player_full_name]=first_basemen_fd_score.get(player_full_name, 0)
                    try:
                        first_basemen_fd_score[player_full_name] += float(score)/float(divisor)
                    except:
                        first_basemen_fd_score[player_full_name] += 0
                if 4 in position:
                    second_basemen_fd_score[player_full_name]=second_basemen_fd_score.get(player_full_name, 0)
                    try:
                        second_basemen_fd_score[player_full_name] += float(score)/float(divisor)
                    except:
                        second_basemen_fd_score[player_full_name] += 0
                if 5 in position:
                    third_basemen_fd_score[player_full_name]=third_basemen_fd_score.get(player_full_name, 0)
                    try:
                        third_basemen_fd_score[player_full_name] += float(score)/float(divisor)
                    except:
                        third_basemen_fd_score[player_full_name] += 0
                if 6 in position:
                    shortstop_fd_score[player_full_name]=shortstop_fd_score.get(player_full_name, 0)
                    try:
                        shortstop_fd_score[player_full_name] += float(score)/float(divisor)
                    except:
                        shortstop_fd_score[player_full_name] += 0
                if 7 in position:
                    outfielder_fd_score[player_full_name]=outfielder_fd_score.get(player_full_name, 0)
                    try:
                        outfielder_fd_score[player_full_name] += float(score)/float(divisor)
                    except:
                        outfielder_fd_score[player_full_name] += 0    

#algorithm to create a lineup from the scores generated above

def lineup_creator(batter_score_list, pitcher_score_list, salary_dictionary):
    
    #catcher, first, second, third, shortstop, outfield1, outfield2, outfield3, pitcher1, pitcher2
    index = [0,0,0,0,0,0,1,2,0,1]
    position_index = [0,1,2,3,4,5,5,5]
    player_roster = [batter_score_list[position_index[i]][index[i]][0] for i in range(8)]
    pitcher_player_roster = [pitcher_score_list[index[i]][0] for i in [8,9]]
    for pitcher in pitcher_player_roster:
        player_roster.append(pitcher)
    
    deltas = [batter_score_list[position_index[i]][index[i]][1] - batter_score_list[position_index[i]][index[i]+1][1] for i in range(8)]
    pitcher_deltas = [pitcher_score_list[index[i]][1] - pitcher_score_list[index[i]+1][1] for i in [8,9]]
    for pitcher in pitcher_deltas:
        deltas.append(pitcher)

    salary = sum([salary_dictionary[i] for i in player_roster])

    player_count = 0
    position_count = 0
    for player in player_roster:
        player_roster.remove(player)
        if player_count < 8:
            while batter_score_list[position_count][index[player_count]][0] in player_roster:
                index[player_count] += 1
            player_roster.insert(player_count, batter_score_list[position_count][index[player_count]][0])

        else:
            while pitcher_score_list[index[player_count]][0] in player_roster:
                index[player_count] += 1
            player_roster.insert(player_count, pitcher_score_list[index[player_count]][0])
        player_count += 1
        if player_count < 6:
            position_count += 1
    
    while salary > 50000:
        for i,j in enumerate(deltas):
            if j == min(deltas):
                print player_roster
                print i
                player = player_roster[i]
                print player
                player_roster.remove(player)
                print player_roster
                index[i] += 1
                if i < 8:
                    player = batter_score_list[position_index[i]][index[i]][0]
                else:
                    player = pitcher_score_list[index[i]][0]
                while player in player_roster:
                    index[i] += 1
                    print index
                    if i < 8:
                        player = batter_score_list[position_index[i]][index[i]][0]
                    else:
                        player = pitcher_score_list[index[i]][0]
                player_roster.insert(i, player)
                salary = sum([salary_dictionary[i] for i in player_roster])
                deltas = [batter_score_list[position_index[i]][index[i]][1] - batter_score_list[position_index[i]][index[i]+1][1] for i in range(8)]
                pitcher_deltas = [pitcher_score_list[index[i]][1] - pitcher_score_list[index[i]+1][1] for i in [8,9]]
                for pitcher in pitcher_deltas:
                    deltas.append(pitcher)
    final_score = 0
    final_score += catcher_score[player_roster[0]]
    final_score += first_basemen_score[player_roster[1]]
    final_score += second_basemen_score[player_roster[2]]
    final_score += third_basemen_score[player_roster[3]]
    final_score += shortstop_score[player_roster[4]]
    final_score += outfielder_score[player_roster[5]]
    final_score += outfielder_score[player_roster[6]]
    final_score += outfielder_score[player_roster[7]]
    final_score += pitcher_score[player_roster[8]]
    final_score += pitcher_score[player_roster[9]]
    return player_roster, salary, final_score

def extract_fd_info(csv_from_draftkings):
    import csv

    global fd_player_and_salaries

    with open(csv_from_draftkings, 'rb') as csvfile:
        file = csv.reader(csvfile)
        for row in file:
            player_full_name = str(row[3]).lower()
            if player_full_name == 'nickname':
                continue
            #placeholder for dealing with tough characters (accents, etc)
            if '\xed' in player_full_name:
                player_full_name = player_full_name.replace('\xed', 'i')
            if '\xc1' in player_full_name:
                player_full_name = player_full_name.replace('\xc1', 'a')
            if '\xe9' in player_full_name:
                player_full_name = player_full_name.replace('\xe9', 'e')
            if '\xf3' in player_full_name:
                player_full_name = player_full_name.replace('\xf3', 'o')
            if '\xfa' in player_full_name:
                player_full_name = player_full_name.replace('\xfa', 'u')
            if '\xf1' in player_full_name:
                player_full_name = player_full_name.replace('\xf1', 'n')
            if '\xe1' in player_full_name:
                player_full_name = player_full_name.replace('\xe1', 'a')

            #attempt to deal with tough characters, will come back to it later
            
            # player_full_name = column[1].decode('utf-8', "replace")
            # remove_accents(player_full_name)
            # player_full_name = unicodedata.normalize('NFD', unicode(column[1], "utf8")).encode('ascii', 'ignore')
            # player_full_name = PyUnicode_DecodeUTF32(column[1])
            # player_full_name = ''.join((c for c in unicodedata.normalize('NFD', player_full_name) if unicodedata.category(c) != 'Mn'))
            # player_full_name = unidecode(player_full_name)
            
            if player_full_name in starting_players or player_full_name in starting_pitcher:
                fd_salary = str(row[7])
                fd_salary = int(fd_salary)
                fd_player_and_salaries[player_full_name] = fd_salary

    
skipped_players = []
for year in years:
    for player_full_name, position in player_and_position.iteritems():
        dk_score_from_sql(player_full_name, position, year)

#sort dictionaries created in scoring above as tuples
import operator
index_position_score = 0
for position_score in batter_score:
    batter_score[index_position_score] = sorted(position_score.items(), key=operator.itemgetter(1), reverse = True)
    index_position_score += 1
pitchers_score = sorted(pitcher_score.items(), key=operator.itemgetter(1), reverse = True)
       
print lineup_creator(batter_score, pitchers_score, player_and_salaries)




csv_from_fanduel = 'FanDuel-MLB-2017-04-03-18431-players-list.csv'
fd_player_and_salaries = {}
extract_fd_info(csv_from_fanduel)

for player_full_name, position in player_and_position.iteritems():
    fd_score_from_sql(player_full_name, position)

#sort dictionaries created in scoring above as tuples
import operator
index_position_score = 0
for position_fd_score in batter_fd_score:
    batter_fd_score[index_position_score] = sorted(position_fd_score.items(), key=operator.itemgetter(1), reverse = True)
    index_position_score += 1
pitchers_fd_score = sorted(pitcher_fd_score.items(), key=operator.itemgetter(1), reverse = True)
       
print lineup_creator(batter_fd_score, pitchers_fd_score, fd_player_and_salaries)
end_time = time.time()
print('Took %s seconds to calculate.' % (end_time - start_time))







